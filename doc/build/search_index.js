var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Contents","page":"API","title":"Contents","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Pages = [\"api.md\"]\nDepth = 5","category":"page"},{"location":"api/#Supernovae-Functions","page":"API","title":"Supernovae Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Supernovae","category":"page"},{"location":"api/#Public-Objects","page":"API","title":"Public Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Supernovae]\nPrivate = false","category":"page"},{"location":"api/#Supernovae.main-Tuple{AbstractString, Bool, Bool}","page":"API","title":"Supernovae.main","text":"main(toml_path::AbstractString, verbose::Bool, profile::Bool)\n\nLoads toml_path, and sets up logging with verbosity based on verbose. Runs run_Supernovae and if profile is true, also profiles the code.\n\nArguments\n\ntoml_path::AbstractString: Path to toml input file.\nverbose::Bool: Set verbosity of logging\nprofile::Bool: If true, profile run_Supernovae\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.main-Tuple{}","page":"API","title":"Supernovae.main","text":"main()\n\nRead the args, prepare the input TOML and run the actual package functionality. Runs main(toml_path, verbose, profile).\n\n\n\n\n\n","category":"method"},{"location":"api/#Private-Objects","page":"API","title":"Private Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Supernovae]\nPublic = false","category":"page"},{"location":"api/#Supernovae.get_args-Tuple{}","page":"API","title":"Supernovae.get_args","text":"get_args()\n\nHelper function to get the ARGS passed to julia.\n\n\n\n\n\n","category":"method"},{"location":"api/#RunModule-Functions","page":"API","title":"RunModule Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Supernovae.RunModule","category":"page"},{"location":"api/#Public-Objects-2","page":"API","title":"Public Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [RunModule]\nPrivate = false","category":"page"},{"location":"api/#Supernovae.RunModule.run_Supernovae-Tuple{Dict{String, Any}}","page":"API","title":"Supernovae.RunModule.run_Supernovae","text":"run_Supernovae(toml::Dict{String, Any})\n\nMain entrance function for the package\n\nArguments\n\ntoml::Dict{String, Any}: Input toml file containing all options for the package\n\n\n\n\n\n","category":"method"},{"location":"api/#Private-Objects-2","page":"API","title":"Private Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [RunModule]\nPublic = false","category":"page"},{"location":"api/#FilterModule-Functions","page":"API","title":"FilterModule Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Supernovae.RunModule.FilterModule","category":"page"},{"location":"api/#Public-Objects-3","page":"API","title":"Public Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [FilterModule]\nPrivate = false","category":"page"},{"location":"api/#Supernovae.RunModule.FilterModule.Filter","page":"API","title":"Supernovae.RunModule.FilterModule.Filter","text":"struct Filter\n\nPhotometric filter transmission curve.\n\nFields\n\nfacility::String: Name of the filter's facility\ninstrument::String: Name of the filter's instrument\npassband::String: Name of the filter's passband\nwavelength::Vector{Å}: Transmission curve wavelength\ntransmission::Vector{Float64}: Transmission curve transmission\n\n\n\n\n\n","category":"type"},{"location":"api/#Supernovae.RunModule.FilterModule.Filter-Tuple{String, String, String, AbstractString}","page":"API","title":"Supernovae.RunModule.FilterModule.Filter","text":"Filter(facility::String, instrument::String, passband::String, filter_file::AbstractString)\n\nMake Filter object from filter_file transmission curve.\n\nArguments\n\nfacility::String: Name of the filter's facility\ninstrument::String: Name of the filter's instrument\npassband::String: Name of the filter's passband\nfilter_file::AbstractString: Path to transmission curve file. Assumed to be a comma delimited wavelength,transmission file.\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.FilterModule.Filter-Tuple{String, String, String, Dict{String, Any}}","page":"API","title":"Supernovae.RunModule.FilterModule.Filter","text":"Filter(facility::String, instrument::String, passband::String, config::Dict{String, Any})\n\nMake Filter object from config options. config must include \"FILTERPATH\" => path/to/transmissioncurve. If this file exists, the transmission curve will be loaded via Filter(facility::String, instrument::String, passband::String, filter_file::AbstractString), otherwise attempt to create Filter via Filter(facility::String, instrument::String, passband::String, svo::PyCall.PyObject) and the SVO FPS database.\n\nArguments\n\nfacility::String: Name of the filter's facility\ninstrument::String: Name of the filter's instrument\npassband::String: Name of the filter's passband\nconfig::Dict{String, Any}: Options for creating a Filter.\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.FilterModule.Filter-Tuple{String, String, String, PyCall.PyObject}","page":"API","title":"Supernovae.RunModule.FilterModule.Filter","text":"Filter(facility::String, instrument::String, passband::String, svo::PyCall.PyObject)\n\nMake Filter object from svo transmission curve.\n\nArguments\n\nfacility::String: Name of the filter's facility\ninstrument::String: Name of the filter's instrument\npassband::String: Name of the filter's passband\nsvo::Pycall.PyObject: SVO transmission curve\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.FilterModule.synthetic_flux-Tuple{Supernovae.RunModule.FilterModule.Filter, Unitful.Quantity{Float64}}","page":"API","title":"Supernovae.RunModule.FilterModule.synthetic_flux","text":"synthetic_flux(filter::Filter, T::Unitful.Quantity{Float64})\n\nCalculates the flux of a blackbody at temperature T, as observed with the filter\n\nArguments\n\nfilter::Filter: The Filter through which the blackbody is observed\nT::Unitful.Quantity{Float64}: The temperature of the blackbody\n\n\n\n\n\n","category":"method"},{"location":"api/#Private-Objects-3","page":"API","title":"Private Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [FilterModule]\nPublic = false","category":"page"},{"location":"api/#Supernovae.RunModule.FilterModule.planck-Tuple{Unitful.Quantity{Float64}, Unitful.Quantity{Float64}}","page":"API","title":"Supernovae.RunModule.FilterModule.planck","text":"planck(T::Unitful.Quantity{Float64}, λ::Unitful.Quantity{Float64})\n\nPlanck's law: Calculates the specral radiance of a blackbody at temperature T, emitting at wavelength λ\n\nArguments\n\nT::Unitful.Quantity{Float64}: Temperature of blackbody\nλ::Unitful.Quantity{Float64}: Wavelength of blackbody\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.FilterModule.save_filter-Tuple{Supernovae.RunModule.FilterModule.Filter, AbstractString}","page":"API","title":"Supernovae.RunModule.FilterModule.save_filter","text":"save_filter(filter::Filter, filter_dir::AbstractString)\n\nSave filter to directory filter_dir.\n\nArguments\n\nfilter::Filter: The Filter to save.\nfilter_dir::AbstractString: The directory to save filter to.\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.FilterModule.svo-Tuple{String, String, String}","page":"API","title":"Supernovae.RunModule.FilterModule.svo","text":"svo(facility::String, instrument::String, passband::String)\n\nAttempt to get filter transmission curve from SVO. Uses the python package astroquery via PyCall.\n\nArguments\n\nfacility::String: SVO name for the filter's facility\ninstrument::String: SVO name for the filter's instrument\npassband::String: SVO name for the filter's passband\n\n\n\n\n\n","category":"method"},{"location":"api/#PhotometryModule-Functions","page":"API","title":"PhotometryModule Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Supernovae.RunModule.PhotometryModule","category":"page"},{"location":"api/#Public-Objects-4","page":"API","title":"Public Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PhotometryModule]\nPrivate = false","category":"page"},{"location":"api/#Supernovae.RunModule.PhotometryModule.Lightcurve","page":"API","title":"Supernovae.RunModule.PhotometryModule.Lightcurve","text":"mutable struct Lightcurve\n\nA lightcurve is simply a collection of observations\n\nFields\n\nobservations::Vector{Observation}: A Vector of Observation representing a supernova lightcurve.\n\n\n\n\n\n","category":"type"},{"location":"api/#Supernovae.RunModule.PhotometryModule.Lightcurve-Tuple{Vector{Dict{String, Any}}, Unitful.Level, Float64, Dict{String, Any}}","page":"API","title":"Supernovae.RunModule.PhotometryModule.Lightcurve","text":"Lightcurve(observations::Vector{Dict{String,Any}}, zeropoint::Level, redshift::Float64, config::Dict{String,Any}; max_flux_err::Unitful.Quantity{Float64}=Inf * 1.0u\"μJy\", peak_time::Union{Bool,Float64}=false, peak_time_unit::Unitful.FreeUnits)\n\nCreate a Lightcurve from a Vector of observations, modelled as a Vector of Dicts. Each observation must contains the keys NAME, and PATH which specify the name of the supernovae, and a path to the photometry respectively. PATH can either be absolute, or relative to DATA_PATH as specified in [ GLOBAL ] and is expected to be a delimited file of rows and columns, with a header row describing the content of each column, and a row for each individual photometric observation of the lightcurve. Each observation in PATH must contain a time, flux, and flux error column. You can also optionally pescribe a seperate facility, instrument, passband, and upperlimit column. If any of these column exist, they will be read per row. If not, you must specify a global value. The keys DELIMITER::String=\", \", and COMMENT::String=\"#\" allow you to specify the delimiter and comment characters used by PATH.\n\nThe rest of the keys in an observation are for reading or overwriting the photometry in PATH. You can overwrite the facility (FACILITY::String), instrument (INSTRUMENT::String), passband (PASSBAND::String), and whether the photometry is an upperlimit (UPPERLIMIT::Union{Bool, String}). Specifying any overwrites will apply that overwrite to every row of PATH. You can also specify a flux offset (FLUX_OFFSET) assumed to be of the same unit as the flux measurements in PATH. By default, the upplimit column / overwrite is assumed to be a string: upperlimit∈[\"T\", \"TRUE\", \"F\", \"FALSE\"], if you instead want a different string identifier, you can specify UPPERLIMIT_TRUE::Union{String, Vector{String}}, and UPPERLIMIT_FALSE::Union{String, Vector{String}}.\n\nEach column of PATH, including the required time (TIME), flux (FLUX), and flux error (FLUX_ERR), and the optional facility (FACILITY), instrument (INSTRUMENT), passband (PASSBAND), and upperlimit (UPPERLIMIT) columns, can have both an identifier of the column, and the unit of the values be specified (units must be recognisable by Unitful. There are three ways to do this. All of these methods are described by specifying identifiers through HEADER.OBJECT_NAME.COL and either HEADER.OBJECT_NAME.UNIT or HEADER.OBJECT_NAME.UNIT_COL. For example to given an identifier for time, you'd include HEADER.TIME.COL and HEADER.TIME.UNIT.  \n\nThe first method is to simply assume the headers have the syntax name [unit], with time, flux, and flux error having the names time, flux, and flux_err respectively. This is the default when no identifiers are given, but can also be used for the unit identifier by specifying HEADER.OBJECT_NAME.UNIT = \"DEFAULT\".\n\nThe next method involves specifying the name of the column containing data of the object in question. This is simply HEADER.OBJECT_NAME.COL = \"col_name\". For the unit you can either specify a global unit for the object via HEADER.OBJECT_NAME.UNIT = \"unit\", or you can specify a unit column by name via HEADER.OBJECT_NAME.UNIT_COL = \"unit_col_name\".\n\nThe final method is to specify the index of the column containing data of the object in questions. This is done via HEADER.OBJECT_NAME.COL = col_index. Once again you can either specify a global unit or the index of the column containing unit information via HEADER.OBJECT_NAME.UNIT_COL = unit_col_index. Your choice of identifer can be different for each object and unit, for instance you could specify the name of the time column, and the index of the time unit column.\n\nAs for the rest of the inputs, it is required to specify a zeropoint (in some magnitude unit), the redshift, and provide a global config. You can specify a maximum error on the flux via max_flux_err, which will treat every observation with a flux error greater than this as an outlier which will not be included. Finally you can specify a peak time which all other time parameters will be relative to (i.e, the peak time will be 0 and all other times become time - peaktime). This can either be true, in which case the peak time will be set to the time of maximum flux, or a float with units equal to the units of the time column. If you don't want relative times, set `peaktimetofalse`, which is the default.\n\nArguments\n\nobservations::Vector{Dict{String,Any}}: A Vector of Dicts containing information and overwrites for the file containing photometry of the supernova.\nzeropoint::Level: The zeropoint of the supernova \nredshift::Float64: The redshift of the supernova\nconfig::Dict{String,Any}: The global config, containing information about paths\nmax_flux_err::Unitful.Quantity{Float64}=Inf * 1.0u\"μJy\": An optional constrain on the maximum flux error. Any observation with flux error greater than this is considered an outlier and removed from the lightcurve.\npeak_time::Union{Bool, Float64}=false: If not false, times will be relative to peak_time (i.e, will transform from time to time-peak_time). If true times a relative to the time of peak flux, otherwise times are relative to peak_time, which is assumed to be of the same unit as the times.\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.PhotometryModule.Observation","page":"API","title":"Supernovae.RunModule.PhotometryModule.Observation","text":"mutable struct Observation\n\nA single observation of a supernova, including time, flux, magnitude and filter information.\n\nFields\n\nname::String: The name of the supernova\ntime::typeof(1.0u\"d\"): The time of the observation in MJD\nflux::typeof(1.0u\"Jy\"): The flux of the observation in Jansky\nflux_err::typeof(1.0u\"Jy\"): The flux error of the observation in Jansky\nmag::typeof(1.0u\"AB_mag\"): The magnitude of the observations in AB Magnitude \nmag_err::typeof(1.0u\"AB_mag\"): The magnitude error of the observations in AB Magnitude \nabsmag::typeof(1.0u\"AB_mag\"): The absolute magnitude of the observations in AB Magnitude \nabsmag_err::typeof(1.0u\"AB_mag\"): The absolute magnitude error of the observations in AB Magnitude \nfilter::Filter: The Filter used to observe the supernova \nis_upperlimit::Bool: Whether the observation is an upperlimit\n\n\n\n\n\n","category":"type"},{"location":"api/#Supernovae.RunModule.PhotometryModule.flux_to_mag-Tuple{Unitful.Quantity{Float64}, Unitful.Level}","page":"API","title":"Supernovae.RunModule.PhotometryModule.flux_to_mag","text":"flux_to_mag(flux::Unitful.Quantity{Float64}, zeropoint::Level)\n\nConvert flux to magnitudes. Calculates zeropoint - 2.5log10(flux). Returns AB_mag units\n\nArguments\n\nflux::Unitful.Quantity{Float64}: The flux to convert, in units compatible with Jansky. If the flux is negative it will be set to 0.0 to avoid log10 errors\nzeropoint::Level: The assumed zeropoint, used to convert the flux to magnitudes.\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.PhotometryModule.mag_to_absmag-Tuple{Unitful.Level, Float64}","page":"API","title":"Supernovae.RunModule.PhotometryModule.mag_to_absmag","text":"mag_to_absmag(mag::Level, redshift::Float64; H0::Unitful.Quantity{Float64}=70.0u\"km/s/Mpc\")\n\nConverts mag to absolute magnitude. Calculates mag - 5 log10(c * redshift / (H0 * 10pc))\n\nArguments\n\nmag::Level: The magnitude to convert\nredshift::Float64: The redshift, used to calculate the distance to the object\n;H0::Unitful.Quantity{Float64}=70.0u\"km/s/Mpc: The assumed value of H0, used to calculate the distance to the object\n\n\n\n\n\n","category":"method"},{"location":"api/#Private-Objects-4","page":"API","title":"Private Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PhotometryModule]\nPublic = false","category":"page"},{"location":"api/#Supernovae.RunModule.PhotometryModule.flux_err_to_mag_err-Tuple{Unitful.Quantity{Float64}, Unitful.Quantity{Float64}}","page":"API","title":"Supernovae.RunModule.PhotometryModule.flux_err_to_mag_err","text":"flux_err_to_mag_err(flux::Unitful.Quantity{Float64}, flux_err::Unitful.Quantity{Float64})\n\nConverts flux_err to magnitude error. Calculates (2.5 / log(10)) * (flux_err / flux).\n\nArguments\n\nflux::Unitful.Quantity{Float64}: The flux associated with the error to be converted\nflux_err::Unitful.Quantity{Float64}: The flux error to be converted\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.PhotometryModule.get_column_id-Tuple{Vector{String}, Int64}","page":"API","title":"Supernovae.RunModule.PhotometryModule.get_column_id","text":"get_column_id(::Vector{String}, column_id::Int64)\n\nConvenience function which simply returns the column_id passed in.\n\nArguments\n\ncolumn_id::Int64: Return this column id\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.PhotometryModule.get_column_id-Tuple{Vector{String}, String}","page":"API","title":"Supernovae.RunModule.PhotometryModule.get_column_id","text":"get_column_id(header::Vector{String}, column_id::String)\n\nFind the column in header which contains the given column_id and return its index.\n\nArguments\n\nheader::Vector{String}: The header, split by column\ncolumn_id::String: The column title to search for in header\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.PhotometryModule.get_column_index-Tuple{Vector{String}, Dict{String, Any}}","page":"API","title":"Supernovae.RunModule.PhotometryModule.get_column_index","text":"get_column_index(header::Vector{String}, header_keys::Dict{String,Any})\n\nDetermine the index of each column withing header associated with header_keys\n\nArguments\n\nheader::Vector{String}: The header, split by column names\nheader_keys::Dict{String, Any}: Determine the index of these parameters. The key::String is the type of object stored in the column, for instance \"TIME\", \"FLUX\", \"MAG_ERR\", and so on. The values::Any can be an Int64 or a String where the former indicates the column index (which is simply returned) and the latter represents the name of the key object inside header. For instance key = \"FLUX\" might map to a column in the header title \"Flux\", \"F\", \"emmission\", or \"uJy\".\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.PhotometryModule.get_default_unit-Tuple{Vector{String}, String, Int64}","page":"API","title":"Supernovae.RunModule.PhotometryModule.get_default_unit","text":"getdefaultunit(header::Vector{String}, columnid::String, columnindex::Int64)\n\nIf no unit is provided for a parameter, it is assumed that the unit is listed in the header via \"paramater_name[unit]\". Under this system you might have \"time[d]\", \"flux[μJy]\", or \"mag[AB_mag]\".\n\nArguments\n\nheader::Vector{String}: The header, split by column\ncolumn_id::String: The name of the parameter in the column title\ncolumn_index::Int64: The index of the column in header\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.PhotometryModule.parse_file-Tuple{Vector{String}}","page":"API","title":"Supernovae.RunModule.PhotometryModule.parse_file","text":"parse_file(lines::Vector{String}; delimiter::String=\", \", comment::String=\"#\")\n\nParse a file, splitting on delimiter and removing comments.\n\nArguments\n\nlines::Vector{String}: A vector containing each line of the file to parse\n;delimiter::String=\", \": What delimiter to split on\n;comment::String=\"#\": What comments to remove. Will remove everything from this comment onwards, allowing for inline comments\n\n\n\n\n\n","category":"method"},{"location":"api/#SupernovaModule-Functions","page":"API","title":"SupernovaModule Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Supernovae.RunModule.SupernovaModule","category":"page"},{"location":"api/#Public-Objects-5","page":"API","title":"Public Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [SupernovaModule]\nPrivate = false","category":"page"},{"location":"api/#Supernovae.RunModule.SupernovaModule.Supernova","page":"API","title":"Supernovae.RunModule.SupernovaModule.Supernova","text":"mutable struct Supernova\n\nA Supernova\n\nFields\n\nname::String: Supernova name\nzeropoint::typeof(1.0u\"AB_mag\"): Zeropoint of the supernova\nredshift::Float64: Redshift of the supernova\nlightcurve::[Lightcurve](@ref): The lightcurve of the supernova\n\n\n\n\n\n","category":"type"},{"location":"api/#Supernovae.RunModule.SupernovaModule.Supernova-Tuple{Dict{String, Any}, Dict{String, Any}}","page":"API","title":"Supernovae.RunModule.SupernovaModule.Supernova","text":"Supernova(data::Dict{String,Any}, config::Dict{String,Any})\n\nLoad in a supernova from data, which has a number of keys containing supernova data and options.\n\nNAME::String: Name of the supernova\nZEROPOINT::Float64: Supernova zeropoint\nZEROPOINT_UNIT::String: Unitful unit of zeropoint, default to AB_mag\nREDSHIFT::Float64: Supernova redshift\nMAX_FLUX_ERR::Float64: Maximum allowed flux error, default to inf\nMAX_FLUX_ERR_UNIT::String: Unitful unit of maximum flux error\nPEAK_TIME::Union{Bool, Float64}: If bool, whether to set time relative to peak flux, if Float64, set time relative to PEAK_TIME\nPEAK_TIME_UNIT::String: Unitful unit of peak time\nOBSERVATIONS::Vector{Dict{String,Any}}: Data to be turned into a Lightcurve\n\n\n\n\n\n","category":"method"},{"location":"api/#Private-Objects-5","page":"API","title":"Private Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [SupernovaModule]\nPublic = false","category":"page"},{"location":"api/#PlotModule-Objects","page":"API","title":"PlotModule Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Supernovae.RunModule.PlotModule","category":"page"},{"location":"api/#Public-Objects-6","page":"API","title":"Public Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PlotModule]\nPrivate = false","category":"page"},{"location":"api/#Supernovae.RunModule.PlotModule.plot_lightcurve!-Tuple{Makie.Figure, Makie.Axis, Supernova, Dict{String, Any}}","page":"API","title":"Supernovae.RunModule.PlotModule.plot_lightcurve!","text":"plot_lightcurve!(fig::Figure, ax::Axis, supernova::Supernova, plot_config::Dict{String, Any})\n\nAdd lightcurve plot to axis. plot_config contains plotting options.\n\nDATATYPE = [\"flux\", \"magnitude\", \"absmagnitude\"]: The type of data to plot UNITS::Dict: Units for time, and flux, magnitude, or abs_magnitude NAMES::Vector: List of SupernovaModule.Observation.name's to include in the plot. If nothing, all observations are included RENAME::Dict: Convert FilterModule.Filter.passband to new name FILTERS::Vector: List of FilterModule.Filter.passband's to include MARKERSIZE::Int: Size of the markers MARKER::Dict: Marker to use for each SupernovaModule.Observation.name. If a passband is missing, a default marker is used COLOUR::Dict: Marker to use for each FilterModule.Filter.passband. If a passband is missing, a default marker is used LEGEND::Bool: Whether to include a legend\n\nArguments\n\nfig::Figure: Figure to plot to\nax::Axis: Axis to plot to\nsupernova::Supernova: Supernova to plot\nplot_config::Dict{String, Any}: Details of the plot\n\n\n\n\n\n","category":"method"},{"location":"api/#Supernovae.RunModule.PlotModule.plot_lightcurve-Tuple{Supernova, Dict{String, Any}, Dict{String, Any}}","page":"API","title":"Supernovae.RunModule.PlotModule.plot_lightcurve","text":"plot_lightcurve(supernova::Supernova, plot_config::Dict{String,Any}, config::Dict{String,Any})\n\nSet up Figure and Axis, then plot lightcurve using plot_lightcurve!\n\nArguments\n\nsupernova::Supernova: The supernova to plot\nplot_config::Dict{String, Any}: Plot options passed to plot_lightcurve!\nconfig::Dict{String, Any}: Global options including where to save the plot\n\n\n\n\n\n","category":"method"},{"location":"api/#Private-Objects-6","page":"API","title":"Private Objects","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PlotModule]\nPublic = false","category":"page"},{"location":"usage/#Usage-Details","page":"Usage","title":"Usage Details","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"To load a supernova with Supernovae.jl you must create an input file containing details on how to read the lightcurve files of the supernova. This file is read in using BetterInputFiles.jl, which provides a number of advantages, including:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Choice of .yaml, .toml, or .json files. All examples will be .toml but you can choose whichever is preferable for your workflow.\nCase-insensitive keys\nAbility to include other files via <include path/to/file.toml>. This will essentially copy paste the contents of file.toml into your input file.\nAbility to interpolate environmental variables via <$ENV_VAR>.\nAbility to interpolate other keys in your input via <%key>. As long as <%key> exists in the same subtree, the value of key will be interpolated, allowing for easy duplication.\nDefault values vai [DEFAULT]. And sub-keys are available everywhere. This is particularly useful when combined with interpolation.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"See the BetterInputFiles docs for more details and examples about how this all works.","category":"page"},{"location":"usage/#Supernovae.jl-Input-Files","page":"Usage","title":"Supernovae.jl Input Files","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"There are three keys which can be included in a supernova's input file, [ global ], [ data ], and [ plot ].","category":"page"},{"location":"usage/#[-global-]","page":"Usage","title":"[ global ]","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"[ global ] controls file-paths and is optional. File paths can be absolute, or relative to base_path which, by default, is the parent directory of the input file. The file paths that can be defined are:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"[ global ]\n    base_path = \"./\" # All other paths will be relative to this path\n    output_path = \"base_path/Output\" # Where all output will be placed\n    filter_path = \"base_path/Filters\" # Where filter transmission curves will be saved and loaded\n    data_path = \"base_path/Data\" # any relative paths to data files will be relative to data_path","category":"page"},{"location":"usage/#[-data-]","page":"Usage","title":"[ data ]","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"[ data ] includes all the options for loading in your supernova and is required. data keys include:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"[ data ]\nname::String # The name of the supernova\nzeropoint::Float64 # The zeropoint of the supernova\nzeropoint_unit::String=\"AB_mag\" # The unit of the zeropoint.\nredshift::Float64 # The redshift of the supernova\nmax_flux_err::Float64=Inf # The maximum allowed flux error. Any datapoint with flux error greater than this will be removed.\nmax_flux_err_unit::String=\"μJy\" # The unit of the maximum flux error.\npeak_time::Union{Bool, Float64}=false # If true, set time relatative to the time of maximum flux. Alternatively, provide a value for time to be set relative to.\npeak_time_unit::String=\"d\" # The unit of the peak_time, only used if peak_time is a value.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In addition to these options, you must specify [[ data.observations ]], which contain details on the data files you with to associate with this supernova. The main assumption is that columns are different parameters and rows are different datapoints. observations keys include:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"[[ data.observations ]]\nname::String # Human readable name of the observations. Typically this is the survey responsible for the observations\npath::String # Path to data file containing photometry information. Can be absolute or relative (to data_path).\ndelimiter::String=\", \" # Delimiter of the data file.\ncomment::String=\"#\" # Comment character of the data file.\nfacility::Union{String,Nothing}=nothing # Override the facility responsible for the data. Use this if this information is not available in the data file.\ninstrument::Union{String,Nothing}=nothing # Override the instrument responsible for the data. Use this if this information is not available in the data file.\npassband::Union{String,Nothing}=nothing # Override the passband of the data. Use this if this information is not available in the data file.\nupperlimit::Union{Bool,String,Nothing}=nothing # Override whether the data is an upperlimit. The String options include [\"time\", \"flux\", \"flux_err\"]. If a String, upperlimit is true if that parameter is negative. Use this if this information is not available in the data file.\nflux_offset::Float64=0 # Apply an offset to the flux. Assumes flux_offset is the same unit as flux.\nupperlimit_true::Vector{String}=[\"T\", \"TRUE\"] # Provides the (case-insensitive) string which corresponds to an upperlimit being true. Used when reading the upperlimit from a column of the data file. \nupperlimit_false::Vector{String}=[\"F\", \"FALSE\"] # Provides the (case-insensitive) string which corresponds to an upperlimit being false. Used when reading the upperlimit from a column of the data file. ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The rest of the observations keys are related to loading in data from the data file. Your data file must include per-observation time, flux, and flux error information. Additionally, per-observation facility, instrument, passband, and upperlimit information can be included. In general there are three different ways to load a parameter from the data file.","category":"page"},{"location":"usage/#Default-Method","page":"Usage","title":"Default Method","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The default assumption is that the data file has a header line with syntax:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"time [d], flux [μJy], flux_err [μJy]","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"If this is the case, then you need not provide any more details and Supernovae.jl will be able to extract these.","category":"page"},{"location":"usage/#Column-Name","page":"Usage","title":"Column Name","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"If your header doesn't exactly match the default header, then you can specify which column corresponds to which parameter via the header name of that parameter:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"[[ data.observations ]]\nheader.time.col = \"MJD\" # The name of the time column\nheader.time.unit = \"d\" # The unit of the time column\nheader.flux.col = \"brightness\" # The name of the time column\nheader.flux.unit = \"μJy\" # The unit of the time column\nheader.flux_err.col = \"d_brightness\" # The name of the time column\nheader.flux_err.unit = \"μJy\" # The unit of the time column\nheader.facility.col = \"survey\" # The name of the facility column\nheader.instrument.col = \"telescope\" # The name of the instrument column\nheader.passband.col = \"filter\" # The name of the passband column\nheader.upperlimit.col = \"is_real\" # The name of the upperlimit column","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In addition to specifying the unit of a parameter, you can also specify header.parameter.unit_col to give the column name containing the unit of that parameter.","category":"page"},{"location":"usage/#Column-Index","page":"Usage","title":"Column Index","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Instead of header.parameter.col being the name of the column, you can provide the index of the column. This can be mixed and matched with the column name method to allow you to load in a large number of different syntaxes.","category":"page"},{"location":"usage/#Filter-details","page":"Usage","title":"Filter details","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Your choice of facility, instrument, and passband is very important. Supernovae.jl will search filter_path for a transmission curve file with name facility__instrument__passband. If you have the passband for all your observations, make sure to put them in filter_path! If you don't, check if they're available on the SVO Filter Profile Service. If so, make sure facility, instrument, and passband match the SVO FPS syntax as Supernovae.jl will attempt to download the transmission curve and save it to filter_path.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Transission curve files should be comma seperated files containing the wavelength (in angstroms), and the transmission at that wavelength. Check the Examples directory to see what to expect.","category":"page"},{"location":"usage/#[-plot-]","page":"Usage","title":"[ plot ]","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The plot key is optional, with Supernovae.jl only producing plots if this key exists. At the moment only lightcurve plots are implemented, but in the future there will be filter, and spectra plots.","category":"page"},{"location":"usage/#[-plot.lightcurve-]","page":"Usage","title":"[ plot.lightcurve ]","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The lightcurve plot has a number of keys used to customise your plot.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"[ plot.lightcurve ]\npath::String=\"$(supernova.name)_lightcurve.svg\" # Where to save the plot, relative to output_path\ndatatype::String=\"flux\" # What type of data to plot. Options include \"flux\", \"magnitude\", and \"abs_magnitude\".\nunit.time::String=\"d\" # Time unit\nunit.data::String=[\"μJy\", \"AB_mag\"] # Depending on the type of data, this will default to either μJy or AB_mag.\nname::Union{Vector{String},Nothing}=nothing # What observations to include, based on their human readable name. If nothing, all observations are included.\nfilters::Union{Vector{String},Nothing}=nothing # What passbands to include. If nothing, all passbands are included.\nrename.[passband, obs_name]::String=new_name # Optionally rename passband or obs_name to new_name. Useful if you don't want to use the SVO name, or want to add additional detail.\noffset.[passband, obs_name]::Float64=0 # Optionally include an offset to the given passband or obs_name. If an observation has both passband and obs_name, it will be offset twice!\nmarkersize::Int64=11 # Set the marker size.\nmarker.obs_name::String=\"nothing\" # Set the marker type for observations with name obs_name. If \"nothing\", default marker is used.\ncolour.passband::Union{String,Nothing}=nothing # Set the colour for passband. If nothing, default colours are used.\nlegend::Bool=true # Whether to include a legend in the plot.","category":"page"},{"location":"#[Supernovae.jl](https://github.com/OmegaLambda1998/Supernovae.jl)-Documentation","page":"Supernovae","title":"Supernovae.jl Documentation","text":"","category":"section"},{"location":"","page":"Supernovae","title":"Supernovae","text":"Provides methods for reading in and plotting supernova lightcurves from text files. Extremely flexible reading methods allow for almost any reasonable lightcurve data file syntax to be read.","category":"page"},{"location":"#Install","page":"Supernovae","title":"Install","text":"","category":"section"},{"location":"","page":"Supernovae","title":"Supernovae","text":"$ git clone git@github.com:OmegaLambda1998/Supernovae.jl.git \n$ cd Supernovae.jl\n$ make","category":"page"},{"location":"#Usage","page":"Supernovae","title":"Usage","text":"","category":"section"},{"location":"","page":"Supernovae","title":"Supernovae","text":"$ ./scripts/Supernovae -v path/to/input.toml","category":"page"},{"location":"","page":"Supernovae","title":"Supernovae","text":"Details on how to build the input files which control Supernovae.jl can be found in Usage.","category":"page"},{"location":"#Example-data-file","page":"Supernovae","title":"Example data file","text":"","category":"section"},{"location":"","page":"Supernovae","title":"Supernovae","text":"The following example input file can be found in the Examples directory.","category":"page"},{"location":"","page":"Supernovae","title":"Supernovae","text":"[ global ]\nfilter_path = \"../Filters\" # Defaults to base_path / Filters\ndata_path = \"Data\"\noutput_path = \"../../Outputs/2021zby\" # Defaults to base_path / Output\n\n# Data\n[ data ]\n# First include information about the supernova\nname = \"2021zby\" # Required\nzeropoint = 8.9 # Required\nredshift = 0.02559 # Required\nmax_flux_err = 2.5e2 # Optional, set's the maximum allowed value for the uncertainty in the flux\nmax_flux_err_unit = \"µJy\" # Optional, default to µJy\npeak_time = true # Default false. Can either be true, in which case all times will become relative to the peak data point. Alternatively, give a value, and all times will be relative to that value\n\n[[ data.observations ]] # Now load in different observations of the supernova. This can either be one file with all observations, or you can load in multiple files\nname = \"atlas\" # Required, Human readable name to distinguish observations\npath = \"atlas_1007.dat\" # Required, Accepts either relative (to Supernova) or absolute path\ndelimiter = \" \" # Optional, defaults to comma\nfacility = \"Misc\"\ninstrument = \"Atlas\" # Optional, will overwrite anything in the file \nupperlimit = \"flux_err\"\n\n# Since this file contains a header that isn't in the expected format, you can optionally specify what each header corresponds to.\n# If you do this you MUST specify the time, flux, and flux error.\n# You can also specify the filter, instrument, or upperlimit columns if they're in the file. If not, specify them above\nheader.time.col = \"MJD\"\nheader.time.unit = \"d\"\n\nheader.flux.col = \"uJy\"\nheader.flux.unit = \"µJy\"\n\nheader.flux_err.col = \"duJy\"\nheader.flux_err.unit = \"µJy\"\n\nheader.passband.col = \"F\"\n\n[[ data.observations ]]\nname = \"tess 6hr\"\npath = \"tess_2_6hrlc.txt\"\ndelimiter = \" \"\ncomment = \"#\" # Optional, defines what is a comment (will be removed). Defaults to #\nfacility = \"tess\"\ninstrument = \"tess\"\npassband = \"Red\"\nfilter_name = \"Tess\"\nupperlimit = false\nflux_offset = 0.296 # Defaults to 0, assumes same units as flux\n\n[ plot.lightcurve ]\nfilters = [\"Red\", \"orange\"]\nmarkersize = 21\nmarker.\"tess 6hr\" = \"utriangle\"\nmarker.atlas = \"circle\"\ncolour.Red = \"red\"\nrename.Red = \"Tess: Red\"\nrename.orange = \"Atlas: Orange\"\ncolour.orange = \"orange\"\nlegend = true","category":"page"}]
}
